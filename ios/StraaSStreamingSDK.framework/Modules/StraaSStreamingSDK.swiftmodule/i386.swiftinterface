// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.0.32.1 clang-1103.0.32.29)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StraaSStreamingSDK
import AVFoundation
import HaishinKit_Straas
@_exported import StraaSStreamingSDK
import Swift
import UIKit
public protocol STSStreamingManagerDelegate : AnyObject {
  func streamingManager(_: StraaSStreamingSDK.StreamingManager, onError: Foundation.NSError, liveId: Swift.String)
  func streamingManager(_: StraaSStreamingSDK.StreamingManager, didUpdate statsReport: StraaSStreamingSDK.STSStreamingStatsReport)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class StreamingManager : ObjectiveC.NSObject {
  weak public var delegate: StraaSStreamingSDK.STSStreamingManagerDelegate?
  @objc public var captureDevicePosition: AVFoundation.AVCaptureDevice.Position {
    @objc get
    @objc set(value)
  }
  @objc public var state: StraaSStreamingSDK.STSStreamingState {
    get
  }
  @objc public var JWT: Swift.String? {
    get
  }
  @objc public var currentStreamingLiveId: Swift.String? {
    @objc get
  }
  @objc public var currentStreamingKey: Swift.String? {
    @objc get
  }
  @objc public var audioEnabled: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public var isFlipFrontCameraOutputHorizontal: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc public class func getInstance(with JWT: Swift.String) -> StraaSStreamingSDK.StreamingManager?
  @objc dynamic public var currentFPS: Swift.UInt16 {
    get
  }
  @objc deinit
}
extension StreamingManager {
  @objc dynamic public func prepare(previewView: HaishinKit_Straas.GLHKView, configuration: StraaSStreamingSDK.STSStreamingPrepareConfig, success: @escaping ((CoreGraphics.CGSize) -> ()), failure: @escaping ((Foundation.NSError) -> ()))
  @objc dynamic public func prepare(videoSize: CoreGraphics.CGSize, previewView: HaishinKit_Straas.GLHKView, outputImageOrientation: UIKit.UIInterfaceOrientation, success: @escaping (() -> Swift.Void), failure: @escaping ((Foundation.NSError) -> Swift.Void))
  @objc dynamic public func startStreamingWithConfguration(_ confguration: StraaSStreamingSDK.STSStreamingLiveEventConfig, success: @escaping ((Swift.String) -> Swift.Void), failure: @escaping ((Foundation.NSError, Swift.String?) -> Swift.Void))
  @objc dynamic public func startStreamingWithLiveID(_ liveId: Swift.String, success: @escaping (() -> Swift.Void), failure: @escaping ((Foundation.NSError) -> Swift.Void))
  @objc dynamic public func startStreamingWithStreamKey(_ streamKey: Swift.String, success: @escaping (() -> Swift.Void), failure: @escaping ((Foundation.NSError) -> ()))
  @objc dynamic public func stopStreaming(with success: @escaping ((Swift.String) -> ()), failure: @escaping ((Foundation.NSError, Swift.String?) -> ()))
  @objc dynamic public func createLiveEvent(with configuration: StraaSStreamingSDK.STSStreamingLiveEventConfig, success: @escaping ((Swift.String) -> ()), failure: @escaping ((Foundation.NSError, Swift.String?) -> ()))
  @objc dynamic public func endLiveEvent(with liveId: Swift.String, success: @escaping ((Swift.String) -> ()), failure: @escaping ((Foundation.NSError) -> ()))
  @objc dynamic public func getStreamingStatsReport() -> StraaSStreamingSDK.STSStreamingStatsReport?
  @objc dynamic public func getStreamingInfo(with liveId: Swift.String, success: @escaping ((StraaSStreamingSDK.STSStreamingInfo) -> ()), failure: @escaping ((Foundation.NSError) -> ()))
}
extension StreamingManager {
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
extension StreamingManager : HaishinKit_Straas.RTMPStreamDelegate {
  public func didPublishInsufficientBW(_ stream: HaishinKit_Straas.RTMPStream, withConnection: HaishinKit_Straas.RTMPConnection)
  public func didPublishSufficientBW(_ stream: HaishinKit_Straas.RTMPStream, withConnection: HaishinKit_Straas.RTMPConnection)
  @objc dynamic public func didOutputAudio(_ buffer: AVFoundation.AVAudioPCMBuffer, presentationTimeStamp: CoreMedia.CMTime)
  @objc dynamic public func didOutputVideo(_ buffer: CoreMedia.CMSampleBuffer)
  @objc dynamic public func clear()
}

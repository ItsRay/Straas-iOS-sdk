#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2 (swiftlang-1103.0.32.1 clang-1103.0.32.29)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <StraaSStreamingSDK/StraaSStreamingSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="StraaSStreamingSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// <ul>
///   <li>
///     StraaS.io streaming manager
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18StraaSStreamingSDK16StreamingManager")
@interface StreamingManager : NSObject
@property (nonatomic) enum AVCaptureDevicePosition captureDevicePosition;
/// <ul>
///   <li>
///     The state of the streaming manager.
///   </li>
/// </ul>
@property (nonatomic, readonly) STSStreamingState state;
/// <ul>
///   <li>
///     Current member JWT
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable JWT;
/// <ul>
///   <li>
///     The id of the current streaming live event.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable currentStreamingLiveId;
/// The stream key of the current streaming live event.
@property (nonatomic, readonly, copy) NSString * _Nullable currentStreamingKey;
/// The enabled status of audio. If the audio is not enabled, it means there is no sound
/// in the audio stream.
/// This method should only be called when the enum state of <code>STSStreamingState</code> is greater than <code>STSStreamingStatePreparing</code>.
@property (nonatomic) BOOL audioEnabled;
/// <ul>
///   <li>
///     A boolean value indicates whether the video stream of the front camera will be flipped horizontally from the preview. Defaults to <code>YES</code>.
///   </li>
/// </ul>
@property (nonatomic) BOOL isFlipFrontCameraOutputHorizontal;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates and returns a STSStreamingManager object with given member JWT.
/// This method can only be called after you configured application successfully
/// (by calling <code>STSApplication</code> method <code>configureApplication:</code>),
/// otherwise you will get a nil object.
/// @param JWT The member token got from StraaS server.
/// @return A STSStreamingManager object initialized with JWT.
+ (StreamingManager * _Nullable)getInstanceWith:(NSString * _Nonnull)JWT SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     The video frame rate in frames per second.
///   </li>
/// </ul>
@property (nonatomic, readonly) uint16_t currentFPS;
@end

@class AVAudioPCMBuffer;

@interface StreamingManager (SWIFT_EXTENSION(StraaSStreamingSDK))
- (void)didOutputAudio:(AVAudioPCMBuffer * _Nonnull)buffer presentationTimeStamp:(CMTime)presentationTimeStamp;
- (void)didOutputVideo:(CMSampleBufferRef _Nonnull)buffer;
- (void)clear;
@end


@interface StreamingManager (SWIFT_EXTENSION(StraaSStreamingSDK))
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

@class GLHKView;
@class STSStreamingPrepareConfig;
@class NSError;
@class STSStreamingLiveEventConfig;
@class STSStreamingStatsReport;
@class STSStreamingInfo;

@interface StreamingManager (SWIFT_EXTENSION(StraaSStreamingSDK))
/// <ul>
///   <li>
///     Initializes the camera, codec and microphone, you will be able to preview the live stream after prepare success.
///   </li>
///   <li>
///     This method should only be called when the STSStreamingManager’s state is STSStreamingStateIdle or STSStreamingStatePrepared.
///   </li>
///   <li>
///     The success and failure completion handler will always be dispatched to the main queue.
///   </li>
///   <li>
///   </li>
///   <li>
///     @param previewView   The view to preview the output video.
///   </li>
///   <li>
///     @param configuration The configuration of the output video.
///   </li>
///   <li>
///     @param success       A block object to be executed when the task finishes successfully.
///     This block has no return value and takes one argument: the size of the output video.
///   </li>
///   <li>
///     @param failure       A block object to be executed when the task finishes unsuccessfully.
///     This block has no return value and takes one argument: the error object describing the error that occurred.
///   </li>
/// </ul>
- (void)prepareWithPreviewView:(GLHKView * _Nonnull)previewView configuration:(STSStreamingPrepareConfig * _Nonnull)configuration success:(void (^ _Nonnull)(CGSize))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// <ul>
///   <li>
///     Initializes the camera, codec and microphone, you will be able to preview the live stream after prepare success.
///   </li>
///   <li>
///     This method should only be called when the STSStreamingManager’s state is STSStreamingStateIdle or STSStreamingStatePrepared.
///   </li>
///   <li>
///     The success and failure completion handler will always be dispatched to the main queue.
///   </li>
///   <li>
///   </li>
///   <li>
///     @param videoSize              The output video size. The width and height should both be the multiple of two.
///     If the width/height is not an even number.
///   </li>
///   <li>
///     @param previewView            The view to preview the output video.
///   </li>
///   <li>
///     @param outputImageOrientation The orientation of the output video.
///   </li>
///   <li>
///     @param success                A block object to be executed when the task finishes successfully.
///   </li>
///   <li>
///     @param failure                A block object to be executed when the task finishes unsuccessfully.
///   </li>
///   <li>
///     \code
///                                This block has no return value and takes one argument: the error object describing the error that occurred.
///
///     \endcode</li>
/// </ul>
- (void)prepareWithVideoSize:(CGSize)videoSize previewView:(GLHKView * _Nonnull)previewView outputImageOrientation:(UIInterfaceOrientation)outputImageOrientation success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// <ul>
///   <li>
///     Starts to streaming with the provided parameters.
///   </li>
///   <li>
///   </li>
///   <li>
///     This method will create a live event owned by current member JWT and start to stream.
///   </li>
///   <li>
///     Note that you should only call this method when the length of <code>JWT</code> is larger than zero (which means the member is not a guest). Otherwise, you will get an error.
///   </li>
///   <li>
///   </li>
///   <li>
///     @param configuration The configuration of the live event.
///   </li>
///   <li>
///     @param success       A block object to be executed when the task finishes successfully. This block has no return value and takes one arguments: the current streaming live event id.
///   </li>
///   <li>
///     @param failure       A block object to be executed when the task finishes unsuccessfully. This block has no return value and takes two arguments: the error object describing the error that occurred, and the live event id related to this error(can be nil). e.g. When the error is STSStreamingErrorCodeLiveCountLimit, you will get the not ended live event id, so that you can remove it.
///   </li>
/// </ul>
- (void)startStreamingWithConfguration:(STSStreamingLiveEventConfig * _Nonnull)confguration success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull, NSString * _Nullable))failure;
/// Starts to stream with given live event id.
/// Note that you should only call this method when the length of <code>JWT</code> is larger than zero (which means the member is not a guest). Otherwise, you will get an error.
/// @param liveId  The id of the live event.
/// @param success A block object to be executed when the task finishes successfully.
/// @param failure A block object to be executed when the task finishes unsuccessfully. This block has no return value and takes one argument: the error object describing the error that occurred.
- (void)startStreamingWithLiveID:(NSString * _Nonnull)liveId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Starts to stream with given stream key.
/// @param streamKey The stream key got from StraaS server.
/// @param success A block object to be executed when the task finishes successfully.
/// @param failure A block object to be executed when the task finishes unsuccessfully. This block has no return value and takes one argument: the error object describing the error that occurred.
- (void)startStreamingWithStreamKey:(NSString * _Nonnull)streamKey success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Stops the current live streaming.
/// This method can only be called when <code>state</code> is <code>STSStreamingStateConnecting</code> or <code>STSStreamingStateStreaming</code>.
/// @param success A block object to be executed when the task finishes successfully. This block has no return value and takes one argument: the live event id of stopped streaming (can be nil if you start current stream by a stream key).
/// @param failure A block object to be executed when the task finishes unsuccessfully.This block has no return value and takes two arguments: the error object describing the error that occurred, and the live event id related to this error (can be nil if you start current stream by a stream key).
- (void)stopStreamingWith:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull, NSString * _Nullable))failure;
/// Create a live event owned by current member JWT.
/// Note that you should only call this method when the length of <code>JWT</code> is larger than zero (which means the member is not a guest). Otherwise, you will get an error.
/// @param configuration The configuration of the live event.
/// @param success       A block object to be executed when the task finishes successfully.
/// @param failure       A block object to be executed when the task finishes unsuccessfully. This block has no return value and takes two arguments: the error object describing the error that occurred, and the live event id related to this error(can be nil). e.g. When the error is STSStreamingErrorCodeLiveCountLimit, you will get the not ended live event id, so that you can remove it.
- (void)createLiveEventWith:(STSStreamingLiveEventConfig * _Nonnull)configuration success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull, NSString * _Nullable))failure;
/// Sets the status of a live event to “ended”.
/// Note that you are not able to end a live event which is not owned by current member JWT through SDK.
/// @param liveId The id of the live event.
/// @param success A block object to be executed when the task finishes successfully.
/// @param failure  A block object to be executed when the task finishes unsuccessfully. This block has no return value and takes one argument: the error object describing the error that occurred.
- (void)endLiveEventWith:(NSString * _Nonnull)liveId success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get the streaming statistics.
/// @return The streaming statistics, or nil if <code>state</code> is not <code>STSStreamingStateStreaming</code>.
- (STSStreamingStatsReport * _Nullable)getStreamingStatsReport SWIFT_WARN_UNUSED_RESULT;
/// Gets the streaming information of a live event.
/// Note that you are not able to get the streaming information of the live event which does not belong to current member JWT through SDK.
/// @param liveId The id of the live event.
/// @param success A block object to be executed when the task finishes successfully.
/// @param failure A block object to be executed when the task finishes unsuccessfully. This block has no return value and takes one argument: the error object describing the error that occurred.
- (void)getStreamingInfoWith:(NSString * _Nonnull)liveId success:(void (^ _Nonnull)(STSStreamingInfo * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2 (swiftlang-1103.0.32.1 clang-1103.0.32.29)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <StraaSStreamingSDK/StraaSStreamingSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="StraaSStreamingSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// <ul>
///   <li>
///     StraaS.io streaming manager
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18StraaSStreamingSDK16StreamingManager")
@interface StreamingManager : NSObject
@property (nonatomic) enum AVCaptureDevicePosition captureDevicePosition;
/// <ul>
///   <li>
///     The state of the streaming manager.
///   </li>
/// </ul>
@property (nonatomic, readonly) STSStreamingState state;
/// <ul>
///   <li>
///     Current member JWT
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable JWT;
/// <ul>
///   <li>
///     The id of the current streaming live event.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable currentStreamingLiveId;
/// The stream key of the current streaming live event.
@property (nonatomic, readonly, copy) NSString * _Nullable currentStreamingKey;
/// The enabled status of audio. If the audio is not enabled, it means there is no sound
/// in the audio stream.
/// This method should only be called when the enum state of <code>STSStreamingState</code> is greater than <code>STSStreamingStatePreparing</code>.
@property (nonatomic) BOOL audioEnabled;
/// <ul>
///   <li>
///     A boolean value indicates whether the video stream of the front camera will be flipped horizontally from the preview. Defaults to <code>YES</code>.
///   </li>
/// </ul>
@property (nonatomic) BOOL isFlipFrontCameraOutputHorizontal;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates and returns a STSStreamingManager object with given member JWT.
/// This method can only be called after you configured application successfully
/// (by calling <code>STSApplication</code> method <code>configureApplication:</code>),
/// otherwise you will get a nil object.
/// @param JWT The member token got from StraaS server.
/// @return A STSStreamingManager object initialized with JWT.
+ (StreamingManager * _Nullable)getInstanceWith:(NSString * _Nonnull)JWT SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     The video frame rate in frames per second.
///   </li>
/// </ul>
@property (nonatomic, readonly) uint16_t currentFPS;
@end

@class AVAudioPCMBuffer;

@interface StreamingManager (SWIFT_EXTENSION(StraaSStreamingSDK))
- (void)didOutputAudio:(AVAudioPCMBuffer * _Nonnull)buffer presentationTimeStamp:(CMTime)presentationTimeStamp;
- (void)didOutputVideo:(CMSampleBufferRef _Nonnull)buffer;
- (void)clear;
@end


@interface StreamingManager (SWIFT_EXTENSION(StraaSStreamingSDK))
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

@class GLHKView;
@class STSStreamingPrepareConfig;
@class NSError;
@class STSStreamingLiveEventConfig;
@class STSStreamingStatsReport;
@class STSStreamingInfo;

@interface StreamingManager (SWIFT_EXTENSION(StraaSStreamingSDK))
/// <ul>
///   <li>
///     Initializes the camera, codec and microphone, you will be able to preview the live stream after prepare success.
///   </li>
///   <li>
///     This method should only be called when the STSStreamingManager’s state is STSStreamingStateIdle or STSStreamingStatePrepared.
///   </li>
///   <li>
///     The success and failure completion handler will always be dispatched to the main queue.
///   </li>
///   <li>
///   </li>
///   <li>
///     @param previewView   The view to preview the output video.
///   </li>
///   <li>
///     @param configuration The configuration of the output video.
///   </li>
///   <li>
///     @param success       A block object to be executed when the task finishes successfully.
///     This block has no return value and takes one argument: the size of the output video.
///   </li>
///   <li>
///     @param failure       A block object to be executed when the task finishes unsuccessfully.
///     This block has no return value and takes one argument: the error object describing the error that occurred.
///   </li>
/// </ul>
- (void)prepareWithPreviewView:(GLHKView * _Nonnull)previewView configuration:(STSStreamingPrepareConfig * _Nonnull)configuration success:(void (^ _Nonnull)(CGSize))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// <ul>
///   <li>
///     Initializes the camera, codec and microphone, you will be able to preview the live stream after prepare success.
///   </li>
///   <li>
///     This method should only be called when the STSStreamingManager’s state is STSStreamingStateIdle or STSStreamingStatePrepared.
///   </li>
///   <li>
///     The success and failure completion handler will always be dispatched to the main queue.
///   </li>
///   <li>
///   </li>
///   <li>
///     @param videoSize              The output video size. The width and height should both be the multiple of two.
///     If the width/height is not an even number.
///   </li>
///   <li>
///     @param previewView            The view to preview the output video.
///   </li>
///   <li>
///     @param outputImageOrientation The orientation of the output video.
///   </li>
///   <li>
///     @param success                A block object to be executed when the task finishes successfully.
///   </li>
///   <li>
///     @param failure                A block object to be executed when the task finishes unsuccessfully.
///   </li>
///   <li>
///     \code
///                                This block has no return value and takes one argument: the error object describing the error that occurred.
///
///     \endcode</li>
/// </ul>
- (void)prepareWithVideoSize:(CGSize)videoSize previewView:(GLHKView * _Nonnull)previewView outputImageOrientation:(UIInterfaceOrientation)outputImageOrientation success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// <ul>
///   <li>
///     Starts to streaming with the provided parameters.
///   </li>
///   <li>
///   </li>
///   <li>
///     This method will create a live event owned by current member JWT and start to stream.
///   </li>
///   <li>
///     Note that you should only call this method when the length of <code>JWT</code> is larger than zero (which means the member is not a guest). Otherwise, you will get an error.
///   </li>
///   <li>
///   </li>
///   <li>
///     @param configuration The configuration of the live event.
///   </li>
///   <li>
///     @param success       A block object to be executed when the task finishes successfully. This block has no return value and takes one arguments: the current streaming live event id.
///   </li>
///   <li>
///     @param failure       A block object to be executed when the task finishes unsuccessfully. This block has no return value and takes two arguments: the error object describing the error that occurred, and the live event id related to this error(can be nil). e.g. When the error is STSStreamingErrorCodeLiveCountLimit, you will get the not ended live event id, so that you can remove it.
///   </li>
/// </ul>
- (void)startStreamingWithConfguration:(STSStreamingLiveEventConfig * _Nonnull)confguration success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull, NSString * _Nullable))failure;
/// Starts to stream with given live event id.
/// Note that you should only call this method when the length of <code>JWT</code> is larger than zero (which means the member is not a guest). Otherwise, you will get an error.
/// @param liveId  The id of the live event.
/// @param success A block object to be executed when the task finishes successfully.
/// @param failure A block object to be executed when the task finishes unsuccessfully. This block has no return value and takes one argument: the error object describing the error that occurred.
- (void)startStreamingWithLiveID:(NSString * _Nonnull)liveId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Starts to stream with given stream key.
/// @param streamKey The stream key got from StraaS server.
/// @param success A block object to be executed when the task finishes successfully.
/// @param failure A block object to be executed when the task finishes unsuccessfully. This block has no return value and takes one argument: the error object describing the error that occurred.
- (void)startStreamingWithStreamKey:(NSString * _Nonnull)streamKey success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Stops the current live streaming.
/// This method can only be called when <code>state</code> is <code>STSStreamingStateConnecting</code> or <code>STSStreamingStateStreaming</code>.
/// @param success A block object to be executed when the task finishes successfully. This block has no return value and takes one argument: the live event id of stopped streaming (can be nil if you start current stream by a stream key).
/// @param failure A block object to be executed when the task finishes unsuccessfully.This block has no return value and takes two arguments: the error object describing the error that occurred, and the live event id related to this error (can be nil if you start current stream by a stream key).
- (void)stopStreamingWith:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull, NSString * _Nullable))failure;
/// Create a live event owned by current member JWT.
/// Note that you should only call this method when the length of <code>JWT</code> is larger than zero (which means the member is not a guest). Otherwise, you will get an error.
/// @param configuration The configuration of the live event.
/// @param success       A block object to be executed when the task finishes successfully.
/// @param failure       A block object to be executed when the task finishes unsuccessfully. This block has no return value and takes two arguments: the error object describing the error that occurred, and the live event id related to this error(can be nil). e.g. When the error is STSStreamingErrorCodeLiveCountLimit, you will get the not ended live event id, so that you can remove it.
- (void)createLiveEventWith:(STSStreamingLiveEventConfig * _Nonnull)configuration success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull, NSString * _Nullable))failure;
/// Sets the status of a live event to “ended”.
/// Note that you are not able to end a live event which is not owned by current member JWT through SDK.
/// @param liveId The id of the live event.
/// @param success A block object to be executed when the task finishes successfully.
/// @param failure  A block object to be executed when the task finishes unsuccessfully. This block has no return value and takes one argument: the error object describing the error that occurred.
- (void)endLiveEventWith:(NSString * _Nonnull)liveId success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get the streaming statistics.
/// @return The streaming statistics, or nil if <code>state</code> is not <code>STSStreamingStateStreaming</code>.
- (STSStreamingStatsReport * _Nullable)getStreamingStatsReport SWIFT_WARN_UNUSED_RESULT;
/// Gets the streaming information of a live event.
/// Note that you are not able to get the streaming information of the live event which does not belong to current member JWT through SDK.
/// @param liveId The id of the live event.
/// @param success A block object to be executed when the task finishes successfully.
/// @param failure A block object to be executed when the task finishes unsuccessfully. This block has no return value and takes one argument: the error object describing the error that occurred.
- (void)getStreamingInfoWith:(NSString * _Nonnull)liveId success:(void (^ _Nonnull)(STSStreamingInfo * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
